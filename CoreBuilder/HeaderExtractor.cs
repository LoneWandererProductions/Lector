/*
 * COPYRIGHT:   See COPYING in the top level directory
 * PROJECT:     CoreBuilder
 * FILE:        CoreBuilder/HeaderExtractor.cs
 * PURPOSE:     String Resource Interface.
 * PROGRAMMER:  Peter Geinitz (Wayfarer)
 */

using System;
using System.IO;
using System.Linq;
using System.Text;

namespace CoreBuilder;

/// <inheritdoc />
/// <summary>
///     License Header Builder
/// </summary>
public sealed class HeaderExtractor : IHeaderExtractor
{
    /// <summary>
    ///     Define the header template with placeholders for file info
    /// </summary>
    private const string HeaderTemplate = @"/*
 * COPYRIGHT:   See COPYING in the top level directory
 * PROJECT:     {0}
 * FILE:        {1}
 * PURPOSE:     {2}
 * PROGRAMMER:  {3}
 */
";

    /// <inheritdoc />
    /// <summary>
    ///     Method to process a list of files and insert headers where necessary
    /// </summary>
    /// <param name="directoryPath">The directory path.</param>
    /// <param name="includeSubdirectories">if set to <c>true</c> [subdirectories].</param>
    public string ProcessFiles(string? directoryPath, bool includeSubdirectories)
    {
        var log = new StringBuilder();
        var searchOption = includeSubdirectories ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;

        foreach (var file in Directory.GetFiles(directoryPath, "*.cs", searchOption))
        {
            try
            {
                // Skip autogenerated files
                if (CoreHelper.ShouldIgnoreFile(file))
                {
                    log.AppendLine($"Skipping {file}, marked as autogenerated or excluded.");
                    continue;
                }

                var fileContent = File.ReadAllText(file);

                if (ContainsHeader(fileContent))
                {
                    log.AppendLine($"Skipping {file}, header already exists.");
                    continue;
                }

                var updatedContent = InsertHeader(fileContent, Path.GetFileName(file), "Your file purpose here",
                    "Peter Geinitz (Wayfarer)");
                File.WriteAllText(file, updatedContent);

                log.AppendLine($"Header inserted in {file}");
            }
            catch (Exception ex)
            {
                log.AppendLine($"Failed to process {file}: {ex.Message}");
            }
        }

        return log.ToString();
    }

    /// <inheritdoc />
    /// <summary>
    ///     Scans the directory for .cs files that do not have a license header.
    /// </summary>
    /// <param name="directoryPath">The root directory to scan.</param>
    /// <param name="includeSubdirectories">Whether to include subdirectories.</param>
    /// <returns>A newline-separated list of file paths needing headers.</returns>
    public string DetectFilesNeedingHeaders(string? directoryPath, bool includeSubdirectories)
    {
        if (string.IsNullOrEmpty(directoryPath) || !Directory.Exists(directoryPath))
        {
            return string.Empty;
        }

        var searchOption = includeSubdirectories ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly;
        var csFiles = Directory.GetFiles(directoryPath, "*.cs", searchOption);
        var needingHeaders =
            (from file in csFiles
             where !CoreHelper.ShouldIgnoreFile(file)
             let content = File.ReadAllText(file)
             where !ContainsHeader(content)
             select Path.GetFullPath(file)).ToList();

        return needingHeaders.Count > 0
            ? string.Join(Environment.NewLine, needingHeaders)
            : string.Empty;
    }

    /// <summary>
    ///     Method to check if the file content already contains a header
    ///     Simple check for the presence of "COPYRIGHT" or similar keywords to detect existing headers
    /// </summary>
    /// <param name="content">The content.</param>
    /// <returns>
    ///     <c>true</c> if the specified content contains header; otherwise, <c>false</c>.
    /// </returns>
    private static bool ContainsHeader(string content)
    {
        return content.Split('\n').Select(line => line.Trim().ToLowerInvariant()).Any(trimmed =>
            trimmed.Contains("copyright", StringComparison.InvariantCultureIgnoreCase));
    }


    /// <summary>
    ///     Method to extract namespace from the C# file content
    /// </summary>
    /// <param name="content">The content.</param>
    /// <returns>Extracted Namespace</returns>
    private static string ExtractNamespace(string content)
    {
        foreach (var parts in from line in content.Split('\n')
                              select line.Trim()
                 into trimmed
                              where trimmed.StartsWith("namespace ", StringComparison.InvariantCultureIgnoreCase)
                              select trimmed.Split(new[] { ' ', '{' }, StringSplitOptions.RemoveEmptyEntries))
        {
            return parts.Length > 1 ? parts[1] : "UnknownNamespace";
        }

        return "UnknownNamespace";
    }

    /// <summary>
    ///     Method to insert header into the file content
    /// </summary>
    /// <param name="fileContent">Content of the file.</param>
    /// <param name="fileName">Name of the file.</param>
    /// <param name="purpose">The purpose.</param>
    /// <param name="programmerName">Name of the programmer.</param>
    /// <returns>File with Header.</returns>
    private static string InsertHeader(string fileContent, string fileName, string purpose, string programmerName)
    {
        var namespaceName = ExtractNamespace(fileContent);
        var header = string.Format(HeaderTemplate, namespaceName, fileName, purpose, programmerName);

        // Insert the header at the beginning of the file content
        return string.Concat(header, Environment.NewLine, fileContent);
    }
}
